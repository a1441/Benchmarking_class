import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler


class Benchmark():
    

    
    def __init__(self, demo_df = 'demo',score = 'Additive',benchmark = 'Benchmark',**weights):
        
        self.demo_df = demo_df
        self.score = score
        self.benchmark = benchmark
        
        
        
    def fit(self, df):
        
        """1.Fits the df and assigns equal weights to all factors.
           2.Creates a benchmark df, with an average scenario named 'Bencmark'.
           3.Creates a ranked df where all the kpis either added or multipled based on score option
           4.Adds a plotly graph with benchmark. """
        
        self.df = df
        self.weights = list([1]*int(len(self.df.columns)))
        
        def get_benchmark_df(df):
    
            # create an average of the columns and create a seperate df
            df_mean = pd.DataFrame(df.mean().values).T
            df_mean.columns = df.columns 

            #name & append the benchmark row to the df
            df_mean[df.index.name] = 'Benchmark'
            df_mean.set_index(df.index.name, inplace= True)

            benchmark_df = df.append(df_mean)
            
            return benchmark_df
        
        def rank_df(benchmark_df):
            
            ranked_df = (benchmark_df * self.weights).rank(method='first',na_option='bottom') 
            ranked_df['Additive_Score'] = ranked_df[self.df.columns].sum(axis=1).rank(method='first',na_option='bottom')
            ranked_df['Multiplicative_Score'] = ranked_df[self.df.columns].prod(axis=1).rank(method='first',na_option='bottom')
            
            return ranked_df
        
        
        self.benchmark_df = get_benchmark_df(self.df)
        self.ranked_df = rank_df(self.benchmark_df)
        
        def overview_graph(ranked_df):
            
            fig = px.bar(ranked_df.reset_index(drop=False).sort_values(f'{self.score}_Score', ascending=False), 
             x= ranked_df.index.name , 
             y= f'{self.score}_Score', 
             color = f'{self.score}_Score')

            fig.add_vline(x= ranked_df[f'{self.score}_Score'].max() - ranked_df.T.Benchmark[f'{self.score}_Score']
                          , line_width=3, 
                          line_dash="dash", 
                          line_color="green")

            fig.update_layout(paper_bgcolor='rgba(0,0,0,0)',plot_bgcolor='rgba(0,0,0,0)')

            fig.update_traces(marker_coloraxis=None)

            return fig
        
        self.bar_graph = overview_graph(self.ranked_df)
        
        return self
    
    
    
    def fit_weights(self, *weights):
        
        """Overrides default weights of 1 if explicitly given correct number of weights""" 
        
#         print(len(list(weights)[0]), len(self.df.columns)) if i ever get stuck on this
        try:
            if len(list(weights)[0]) == len(self.df.columns):
                self.weights = list(weights)[0]
                return self
            else: 
                self.weights = list([1]*int(len(self.df.columns)))
                return self
        except IndexError:
            self.weights = list([1]*int(len(self.df.columns)))
            return self
        
    def radar_chart(self, show_me, *bench):
        
        """Scales the input df and the associated score to create radar charts.
           Needs to have an input to show and/or desired benchmark. Defaults to 'Benchmark'
           """
        
        self.show_me = show_me
        if len(bench) > 0:
            self.benchmark = list((bench))[0]
        else:
            self.benchmark = self.benchmark
            
#         print(self.show_me,self.benchmark)
        
        scaler = MinMaxScaler()
        df_scaled = (pd.DataFrame(scaler.fit_transform(self.ranked_df), columns=self.ranked_df.columns)*10).astype(int)
        df_scaled[self.benchmark_df.index.name] = self.benchmark_df.index
        
        og_columns = self.df.columns.values.tolist()
        corr_values = self.benchmark_df[self.benchmark_df.index == show_me].round(2).values.tolist()[0]
        benchmark_values = self.benchmark_df[self.benchmark_df.index == self.benchmark].round(2).values.tolist()[0]
        
        categories = [str(col) + " : " + str(val) + f" vs ({str(bench)})  " for col, val, bench in zip(og_columns,corr_values,benchmark_values)]
        r_score = df_scaled[df_scaled[self.benchmark_df.index.name] == self.show_me ][self.df.columns].values.tolist()[0]
        
        fig = go.Figure()


        fig.add_trace(go.Scatterpolar(
              r= df_scaled[df_scaled[self.benchmark_df.index.name] == self.benchmark ][self.df.columns].values.tolist()[0],
              theta=categories,
              fill='toself',
              name= self.benchmark,
            line_color = 'lightgrey',
            fillcolor  = 'lightgrey',

        ))


        fig.add_trace(go.Scatterpolar(
              r=r_score,
              theta=categories,
              fill='toself',
              name=self.show_me,
            line_color = 'lightgreen',
             fillcolor  = 'lightgreen'
        ))



        fig.update_layout(
          polar=dict(
            radialaxis=dict(
              visible=True,
              range=[0, 11]
            )),
          showlegend=False
        )

        fig.update_layout(title=f"Comparison of {self.show_me} vs {self.benchmark}",title_x=0.5, )

        fig.show()
        
        return self
